package com.ou.grizz.financial.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {

    @Autowired
    private UserDetailsService userDetailsService;

    /*
        Here we need to create the authentication provider (We will use Dao "Data Access Object" authentication provider since we are dealing
        with authentication from Database). This Dao authentication provider will get the data from the database itself
        and then it can proceed ahead with the authentication itself Now to do that, we need to provide the "UserDetailsService" which
        is an Spring Security interface that we implemented as CustomUserDetailsService class

     */

    @Bean
    AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService);
        provider.setPasswordEncoder(new BCryptPasswordEncoder());
        return provider;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers("/list_users").authenticated() //to access the /users page the user must be authenticated
                .anyRequest().permitAll() //all other requests do not need authentication
                .and()
                .formLogin()
                .usernameParameter("email")
                .defaultSuccessUrl("/expenses") //after successful authentication, we will direct the user to the list of users page
                .permitAll()
                .and()
                .logout().logoutSuccessUrl("/").permitAll(); //after logout, direct user to home page
    }

    /*
    Here in the configure() method, a user must login to see the list users page (URL /users) and other pages do not require authentication.
     We also configure the default login page (generated by Spring Security) with the parameter name of the username field is email and the
      default success URL is /users â€“ that means after successful login, the user will be redirected to the list users page.
     */
}
